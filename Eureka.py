# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Eureka', [dirname(__file__)])
        except ImportError:
            import _Eureka
            return _Eureka
        if fp is not None:
            try:
                _mod = imp.load_module('_Eureka', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Eureka = swig_import_helper()
    del swig_import_helper
else:
    import _Eureka
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cdata(ptr, nelements=1):
    return _Eureka.cdata(ptr, nelements)
cdata = _Eureka.cdata

def memmove(data, indata):
    return _Eureka.memmove(data, indata)
memmove = _Eureka.memmove

def hasher():
    return _Eureka.hasher()
hasher = _Eureka.hasher

def randUniform(*args):
    return _Eureka.randUniform(*args)
randUniform = _Eureka.randUniform

def randBinomial(*args):
    return _Eureka.randBinomial(*args)
randBinomial = _Eureka.randBinomial

def randNormal(*args):
    return _Eureka.randNormal(*args)
randNormal = _Eureka.randNormal

def GetMaxValueSizeT():
    return _Eureka.GetMaxValueSizeT()
GetMaxValueSizeT = _Eureka.GetMaxValueSizeT
class SQLQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SQLQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SQLQuery, name)
    __repr__ = _swig_repr
    INT = _Eureka.SQLQuery_INT
    DOUBLE = _Eureka.SQLQuery_DOUBLE
    BOOL = _Eureka.SQLQuery_BOOL
    STRING = _Eureka.SQLQuery_STRING
    CHAR = _Eureka.SQLQuery_CHAR

    def prepareStatement(self, *args):
        return _Eureka.SQLQuery_prepareStatement(self, *args)

    def __init__(self):
        this = _Eureka.new_SQLQuery()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_SQLQuery
    __del__ = lambda self: None
SQLQuery_swigregister = _Eureka.SQLQuery_swigregister
SQLQuery_swigregister(SQLQuery)
cvar = _Eureka.cvar
SQLQuery.WILDCARD = _Eureka.cvar.SQLQuery_WILDCARD

class Physics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Physics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Physics, name)
    __repr__ = _swig_repr

    def NewtonianForce(self, *args):
        return _Eureka.Physics_NewtonianForce(self, *args)

    def Relativity(self, *args):
        return _Eureka.Physics_Relativity(self, *args)

    def rel_NewtonianForce(self, *args):
        return _Eureka.Physics_rel_NewtonianForce(self, *args)

    def rel_CalculateForceB(self, relativity):
        return _Eureka.Physics_rel_CalculateForceB(self, relativity)

    def Impulse(self, inputVector):
        return _Eureka.Physics_Impulse(self, inputVector)

    def Friction(self, targetMU, relativity):
        return _Eureka.Physics_Friction(self, targetMU, relativity)

    def Update_Velocity(self, secondsPassed):
        return _Eureka.Physics_Update_Velocity(self, secondsPassed)

    def UpdateForce(self, *args):
        return _Eureka.Physics_UpdateForce(self, *args)

    def Update_Acceleration(self):
        return _Eureka.Physics_Update_Acceleration(self)

    def math_CalculateDirectionDegrees(self, sourceX, sourceY):
        return _Eureka.Physics_math_CalculateDirectionDegrees(self, sourceX, sourceY)

    def GetDistance(self, source):
        return _Eureka.Physics_GetDistance(self, source)

    def GetLoc(self):
        return _Eureka.Physics_GetLoc(self)

    def GetMU(self):
        return _Eureka.Physics_GetMU(self)

    def GetMass(self):
        return _Eureka.Physics_GetMass(self)

    def GetB2DDirection(self):
        return _Eureka.Physics_GetB2DDirection(self)

    def GetBMagnitude(self):
        return _Eureka.Physics_GetBMagnitude(self)

    def GetGravity(self):
        return _Eureka.Physics_GetGravity(self)

    def GetVelocity(self, axis):
        return _Eureka.Physics_GetVelocity(self, axis)

    def GetElasticity(self):
        return _Eureka.Physics_GetElasticity(self)

    def math_CalculateForceFromChargedParticles(self, Q2, source):
        return _Eureka.Physics_math_CalculateForceFromChargedParticles(self, Q2, source)

    def math_CalculateEField(self, *args):
        return _Eureka.Physics_math_CalculateEField(self, *args)

    def math_Sign(self, *args):
        return _Eureka.Physics_math_Sign(self, *args)

    def math_CalculateMomentum(self, actor, target):
        return _Eureka.Physics_math_CalculateMomentum(self, actor, target)

    def math_CalculateForceFromMagneticField(self, MagneticField, magnitude):
        return _Eureka.Physics_math_CalculateForceFromMagneticField(self, MagneticField, magnitude)

    def GetForceCount(self, axis):
        return _Eureka.Physics_GetForceCount(self, axis)

    def isUnmovable(self):
        return _Eureka.Physics_isUnmovable(self)

    def SetForceCount(self, *args):
        return _Eureka.Physics_SetForceCount(self, *args)

    def SetLoc(self, pos):
        return _Eureka.Physics_SetLoc(self, pos)

    def SetVelocity(self, velocity, axis):
        return _Eureka.Physics_SetVelocity(self, velocity, axis)

    def AddForce(self, *args):
        return _Eureka.Physics_AddForce(self, *args)

    def __init__(self, *args):
        this = _Eureka.new_Physics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Update_Position(self, secondsPassed):
        return _Eureka.Physics_Update_Position(self, secondsPassed)

    def ChangePlanetGravitationalConstant(self, g):
        return _Eureka.Physics_ChangePlanetGravitationalConstant(self, g)

    def Load_Physics(self, physData):
        return _Eureka.Physics_Load_Physics(self, physData)

    def GetCharge(self):
        return _Eureka.Physics_GetCharge(self)
    __swig_destroy__ = _Eureka.delete_Physics
    __del__ = lambda self: None
Physics_swigregister = _Eureka.Physics_swigregister
Physics_swigregister(Physics)


def CalculateDistance(A, B):
    return _Eureka.CalculateDistance(A, B)
CalculateDistance = _Eureka.CalculateDistance

_Eureka.ENDOFFILE_swigconstant(_Eureka)
ENDOFFILE = _Eureka.ENDOFFILE
class data_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_base, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Eureka.new_data_base(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def GetStrBuffer(self):
        return _Eureka.data_base_GetStrBuffer(self)

    def GetValueFromData(self, search):
        return _Eureka.data_base_GetValueFromData(self, search)

    def GetStrFromData(self, search):
        return _Eureka.data_base_GetStrFromData(self, search)

    def GetIntFromData(self, search):
        return _Eureka.data_base_GetIntFromData(self, search)

    def GetValueFromDataWithLine(self, search, lineIndex):
        return _Eureka.data_base_GetValueFromDataWithLine(self, search, lineIndex)

    def GetStrFromDataWithLine(self, search, lineIndex):
        return _Eureka.data_base_GetStrFromDataWithLine(self, search, lineIndex)

    def GetStateOfInternalBuffer(self):
        return _Eureka.data_base_GetStateOfInternalBuffer(self)

    def OpenFileAndGetBinBuffer(self, location):
        return _Eureka.data_base_OpenFileAndGetBinBuffer(self, location)

    def OpenFile(self, location, readMode=True):
        return _Eureka.data_base_OpenFile(self, location, readMode)

    def OpenFileForQuickWrite(self, location):
        return _Eureka.data_base_OpenFileForQuickWrite(self, location)

    def OpenBinFileForQuickWrite(self, location):
        return _Eureka.data_base_OpenBinFileForQuickWrite(self, location)

    def CloseFile(self, *args):
        return _Eureka.data_base_CloseFile(self, *args)

    def GetMode(self):
        return _Eureka.data_base_GetMode(self)

    def WriteValue(self, *args):
        return _Eureka.data_base_WriteValue(self, *args)

    def WriteValueWithLineIndex(self, value, search, lineIndex):
        return _Eureka.data_base_WriteValueWithLineIndex(self, value, search, lineIndex)

    def WriteValueAndFlush(self, value):
        return _Eureka.data_base_WriteValueAndFlush(self, value)

    def GetLineCount(self):
        return _Eureka.data_base_GetLineCount(self)

    def GetNumInstances(self, search):
        return _Eureka.data_base_GetNumInstances(self, search)

    def GetLastOutput(self):
        return _Eureka.data_base_GetLastOutput(self)

    def isOutputOpen(self):
        return _Eureka.data_base_isOutputOpen(self)

    def SearchTermExists(self, search):
        return _Eureka.data_base_SearchTermExists(self, search)

    def RestoreFileContents(self):
        return _Eureka.data_base_RestoreFileContents(self)

    def RefreshFile(self):
        return _Eureka.data_base_RefreshFile(self)

    def CreateNewFile(self, *args):
        return _Eureka.data_base_CreateNewFile(self, *args)
    __swig_getmethods__["CreateNewFile_static"] = lambda x: _Eureka.data_base_CreateNewFile_static
    if _newclass:
        CreateNewFile_static = staticmethod(_Eureka.data_base_CreateNewFile_static)
    __swig_destroy__ = _Eureka.delete_data_base
    __del__ = lambda self: None
    __swig_setmethods__["BUFFER"] = _Eureka.data_base_BUFFER_set
    __swig_getmethods__["BUFFER"] = _Eureka.data_base_BUFFER_get
    if _newclass:
        BUFFER = _swig_property(_Eureka.data_base_BUFFER_get, _Eureka.data_base_BUFFER_set)
data_base_swigregister = _Eureka.data_base_swigregister
data_base_swigregister(data_base)

def data_base_CreateNewFile_static(location):
    return _Eureka.data_base_CreateNewFile_static(location)
data_base_CreateNewFile_static = _Eureka.data_base_CreateNewFile_static


def copyfile(source, destination, binary=True):
    return _Eureka.copyfile(source, destination, binary)
copyfile = _Eureka.copyfile
class draw_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, draw_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, draw_base, name)
    __repr__ = _swig_repr

    def Load_Texture(self, source, ren, fps=30):
        return _Eureka.draw_base_Load_Texture(self, source, ren, fps)

    def apply_surface(self, x, y, destination):
        return _Eureka.draw_base_apply_surface(self, x, y, destination)

    def GetHeightOfMainRect(self):
        return _Eureka.draw_base_GetHeightOfMainRect(self)

    def GetWidthOfMainRect(self):
        return _Eureka.draw_base_GetWidthOfMainRect(self)

    def GetAnimCounter(self):
        return _Eureka.draw_base_GetAnimCounter(self)

    def isNoLoop(self):
        return _Eureka.draw_base_isNoLoop(self)

    def GetTexture(self):
        return _Eureka.draw_base_GetTexture(self)

    def setColor(self, red, green, blue):
        return _Eureka.draw_base_setColor(self, red, green, blue)

    def setBlendMode(self, blending):
        return _Eureka.draw_base_setBlendMode(self, blending)

    def setAlpha(self, alpha):
        return _Eureka.draw_base_setAlpha(self, alpha)

    def setRotationPivot(self, p):
        return _Eureka.draw_base_setRotationPivot(self, p)

    def flip(self, direction=NOFLIP):
        return _Eureka.draw_base_flip(self, direction)

    def rotate(self, degrees):
        return _Eureka.draw_base_rotate(self, degrees)

    def resetRotation(self):
        return _Eureka.draw_base_resetRotation(self)

    def ClearTexture(self):
        return _Eureka.draw_base_ClearTexture(self)

    def SetTextureFromPointer(self, ptr):
        return _Eureka.draw_base_SetTextureFromPointer(self, ptr)

    def SetTextureFromRef(self, tex):
        return _Eureka.draw_base_SetTextureFromRef(self, tex)

    def __init__(self):
        this = _Eureka.new_draw_base()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_draw_base
    __del__ = lambda self: None
draw_base_swigregister = _Eureka.draw_base_swigregister
draw_base_swigregister(draw_base)


def apply_surface(x, y, destination, SpriteSheet, height=40, width=40):
    return _Eureka.apply_surface(x, y, destination, SpriteSheet, height, width)
apply_surface = _Eureka.apply_surface

def LoadTexture(file, ren):
    return _Eureka.LoadTexture(file, ren)
LoadTexture = _Eureka.LoadTexture
class UI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UI, name)
    __repr__ = _swig_repr

    def __init__(self, file, ren):
        this = _Eureka.new_UI(file, ren)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_UI
    __del__ = lambda self: None

    def isVisible(self):
        return _Eureka.UI_isVisible(self)

    def toggleVisibility(self):
        return _Eureka.UI_toggleVisibility(self)

    def GetName(self):
        return _Eureka.UI_GetName(self)

    def GetID(self):
        return _Eureka.UI_GetID(self)

    def SetID(self, id):
        return _Eureka.UI_SetID(self, id)

    def Update(self):
        return _Eureka.UI_Update(self)

    def ProcessEvents(self, event):
        return _Eureka.UI_ProcessEvents(self, event)

    def AddNumToPBar(self, num, name):
        return _Eureka.UI_AddNumToPBar(self, num, name)

    def Draw(self):
        return _Eureka.UI_Draw(self)
UI_swigregister = _Eureka.UI_swigregister
UI_swigregister(UI)


def LoadScript(script, file):
    return _Eureka.LoadScript(script, file)
LoadScript = _Eureka.LoadScript
class Unit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    __repr__ = _swig_repr

    def __init__(self, BlitOrder, path, loc, screen, t_id, hero=False, hasPBar=False):
        this = _Eureka.new_Unit(BlitOrder, path, loc, screen, t_id, hero, hasPBar)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Unit
    __del__ = lambda self: None

    def isMelee(self):
        return _Eureka.Unit_isMelee(self)

    def isNPC(self):
        return _Eureka.Unit_isNPC(self)

    def MoveAI(self):
        return _Eureka.Unit_MoveAI(self)

    def LoadAI(self, file):
        return _Eureka.Unit_LoadAI(self, file)

    def AttackAI(self, target):
        return _Eureka.Unit_AttackAI(self, target)

    def ExecuteAI(self, *args):
        return _Eureka.Unit_ExecuteAI(self, *args)

    def MoveTowardsAI(self, *args):
        return _Eureka.Unit_MoveTowardsAI(self, *args)

    def SetTimer(self, timer_id):
        return _Eureka.Unit_SetTimer(self, timer_id)

    def Update_NewTime(self):
        return _Eureka.Unit_Update_NewTime(self)

    def Update_OldTime(self):
        return _Eureka.Unit_Update_OldTime(self)

    def GetTimeChange(self):
        return _Eureka.Unit_GetTimeChange(self)

    def GetName(self):
        return _Eureka.Unit_GetName(self)

    def GetPhysics(self):
        return _Eureka.Unit_GetPhysics(self)

    def GetDefaultDrawObject(self):
        return _Eureka.Unit_GetDefaultDrawObject(self)

    def ToggleMelee(self):
        return _Eureka.Unit_ToggleMelee(self)

    def GetHP(self):
        return _Eureka.Unit_GetHP(self)

    def GetAD(self):
        return _Eureka.Unit_GetAD(self)

    def GetAP(self):
        return _Eureka.Unit_GetAP(self)

    def GetAttackSpeed(self):
        return _Eureka.Unit_GetAttackSpeed(self)

    def GetRange(self):
        return _Eureka.Unit_GetRange(self)

    def GetVisionRange(self):
        return _Eureka.Unit_GetVisionRange(self)

    def GetID(self):
        return _Eureka.Unit_GetID(self)

    def GetMovementSpeed(self):
        return _Eureka.Unit_GetMovementSpeed(self)

    def GetType(self):
        return _Eureka.Unit_GetType(self)

    def GetBlitOrder(self):
        return _Eureka.Unit_GetBlitOrder(self)

    def SetHP(self, val):
        return _Eureka.Unit_SetHP(self, val)

    def SetAD(self, val):
        return _Eureka.Unit_SetAD(self, val)

    def SetAP(self, val):
        return _Eureka.Unit_SetAP(self, val)

    def SetAttackSpeed(self, val):
        return _Eureka.Unit_SetAttackSpeed(self, val)

    def SetRange(self, val):
        return _Eureka.Unit_SetRange(self, val)

    def SetVisionRange(self, val):
        return _Eureka.Unit_SetVisionRange(self, val)

    def SetMovementSpeed(self, val):
        return _Eureka.Unit_SetMovementSpeed(self, val)

    def SetID(self, id):
        return _Eureka.Unit_SetID(self, id)

    def SetOwner(self, game):
        return _Eureka.Unit_SetOwner(self, game)

    def GetDeath(self):
        return _Eureka.Unit_GetDeath(self)

    def ToggleDeath(self):
        return _Eureka.Unit_ToggleDeath(self)

    def PlaySounds(self, screenLoc):
        return _Eureka.Unit_PlaySounds(self, screenLoc)

    def DrawImages(self):
        return _Eureka.Unit_DrawImages(self)
    __swig_getmethods__["RotateSprite"] = lambda x: _Eureka.Unit_RotateSprite
    if _newclass:
        RotateSprite = staticmethod(_Eureka.Unit_RotateSprite)
    __swig_getmethods__["FlipSprite"] = lambda x: _Eureka.Unit_FlipSprite
    if _newclass:
        FlipSprite = staticmethod(_Eureka.Unit_FlipSprite)
    __swig_getmethods__["ResetRotation"] = lambda x: _Eureka.Unit_ResetRotation
    if _newclass:
        ResetRotation = staticmethod(_Eureka.Unit_ResetRotation)

    def AddBuff(self, buffName):
        return _Eureka.Unit_AddBuff(self, buffName)

    def RemoveBuff(self, buffName):
        return _Eureka.Unit_RemoveBuff(self, buffName)

    def BuffExists(self, buffName):
        return _Eureka.Unit_BuffExists(self, buffName)

    def ApplyBuffs(self):
        return _Eureka.Unit_ApplyBuffs(self)

    def isColliding(self, target):
        return _Eureka.Unit_isColliding(self, target)

    def Update_Physics(self, target):
        return _Eureka.Unit_Update_Physics(self, target)

    def OnCollision(self, target, side):
        return _Eureka.Unit_OnCollision(self, target, side)

    def ProcessKeyEvent(self, key):
        return _Eureka.Unit_ProcessKeyEvent(self, key)

    def LoadKeyScript(self, file):
        return _Eureka.Unit_LoadKeyScript(self, file)

    def LoadKeyBindings(self, file):
        return _Eureka.Unit_LoadKeyBindings(self, file)

    def ProcessMouseMovement(self, x, y):
        return _Eureka.Unit_ProcessMouseMovement(self, x, y)

    def ProcessMouseKey(self, mouseButton, x, y):
        return _Eureka.Unit_ProcessMouseKey(self, mouseButton, x, y)
Unit_swigregister = _Eureka.Unit_swigregister
Unit_swigregister(Unit)

def Unit_RotateSprite(sprite, degrees):
    return _Eureka.Unit_RotateSprite(sprite, degrees)
Unit_RotateSprite = _Eureka.Unit_RotateSprite

def Unit_FlipSprite(*args):
    return _Eureka.Unit_FlipSprite(*args)
Unit_FlipSprite = _Eureka.Unit_FlipSprite

def Unit_ResetRotation(sprite):
    return _Eureka.Unit_ResetRotation(sprite)
Unit_ResetRotation = _Eureka.Unit_ResetRotation

class Trigger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trigger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Eureka.new_Trigger(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Trigger
    __del__ = lambda self: None

    def GetID(self):
        return _Eureka.Trigger_GetID(self)

    def SetID(self, id):
        return _Eureka.Trigger_SetID(self, id)

    def GetDeath(self):
        return _Eureka.Trigger_GetDeath(self)

    def GetLoc(self):
        return _Eureka.Trigger_GetLoc(self)

    def ToggleDeath(self):
        return _Eureka.Trigger_ToggleDeath(self)

    def isUnitOnTrigger(self, target):
        return _Eureka.Trigger_isUnitOnTrigger(self, target)

    def ConsumeTrigger(self, owner, target):
        return _Eureka.Trigger_ConsumeTrigger(self, owner, target)

    def UpdateTriggerLoc(self, X, Y, Z):
        return _Eureka.Trigger_UpdateTriggerLoc(self, X, Y, Z)
Trigger_swigregister = _Eureka.Trigger_swigregister
Trigger_swigregister(Trigger)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Eureka.new_Timer()
        try:
            self.this.append(this)
        except:
            self.this = this

    def start(self):
        return _Eureka.Timer_start(self)

    def stop(self):
        return _Eureka.Timer_stop(self)

    def pause(self):
        return _Eureka.Timer_pause(self)

    def unpause(self):
        return _Eureka.Timer_unpause(self)

    def get_ticks(self):
        return _Eureka.Timer_get_ticks(self)

    def is_started(self):
        return _Eureka.Timer_is_started(self)

    def is_paused(self):
        return _Eureka.Timer_is_paused(self)
    __swig_destroy__ = _Eureka.delete_Timer
    __del__ = lambda self: None
Timer_swigregister = _Eureka.Timer_swigregister
Timer_swigregister(Timer)

class unknown_return(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unknown_return, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unknown_return, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _Eureka.unknown_return_flag_set
    __swig_getmethods__["flag"] = _Eureka.unknown_return_flag_get
    if _newclass:
        flag = _swig_property(_Eureka.unknown_return_flag_get, _Eureka.unknown_return_flag_set)
    __swig_setmethods__["number"] = _Eureka.unknown_return_number_set
    __swig_getmethods__["number"] = _Eureka.unknown_return_number_get
    if _newclass:
        number = _swig_property(_Eureka.unknown_return_number_get, _Eureka.unknown_return_number_set)
    __swig_setmethods__["uNumber"] = _Eureka.unknown_return_uNumber_set
    __swig_getmethods__["uNumber"] = _Eureka.unknown_return_uNumber_get
    if _newclass:
        uNumber = _swig_property(_Eureka.unknown_return_uNumber_get, _Eureka.unknown_return_uNumber_set)
    __swig_setmethods__["decimal"] = _Eureka.unknown_return_decimal_set
    __swig_getmethods__["decimal"] = _Eureka.unknown_return_decimal_get
    if _newclass:
        decimal = _swig_property(_Eureka.unknown_return_decimal_get, _Eureka.unknown_return_decimal_set)
    __swig_setmethods__["answer"] = _Eureka.unknown_return_answer_set
    __swig_getmethods__["answer"] = _Eureka.unknown_return_answer_get
    if _newclass:
        answer = _swig_property(_Eureka.unknown_return_answer_get, _Eureka.unknown_return_answer_set)
    __swig_setmethods__["str"] = _Eureka.unknown_return_str_set
    __swig_getmethods__["str"] = _Eureka.unknown_return_str_get
    if _newclass:
        str = _swig_property(_Eureka.unknown_return_str_get, _Eureka.unknown_return_str_set)
    __swig_setmethods__["blob"] = _Eureka.unknown_return_blob_set
    __swig_getmethods__["blob"] = _Eureka.unknown_return_blob_get
    if _newclass:
        blob = _swig_property(_Eureka.unknown_return_blob_get, _Eureka.unknown_return_blob_set)
    __swig_setmethods__["c"] = _Eureka.unknown_return_c_set
    __swig_getmethods__["c"] = _Eureka.unknown_return_c_get
    if _newclass:
        c = _swig_property(_Eureka.unknown_return_c_get, _Eureka.unknown_return_c_set)
    __swig_setmethods__["ptr"] = _Eureka.unknown_return_ptr_set
    __swig_getmethods__["ptr"] = _Eureka.unknown_return_ptr_get
    if _newclass:
        ptr = _swig_property(_Eureka.unknown_return_ptr_get, _Eureka.unknown_return_ptr_set)

    def __init__(self):
        this = _Eureka.new_unknown_return()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_unknown_return
    __del__ = lambda self: None
unknown_return_swigregister = _Eureka.unknown_return_swigregister
unknown_return_swigregister(unknown_return)

class math_VECTOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, math_VECTOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, math_VECTOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["endX"] = _Eureka.math_VECTOR_endX_set
    __swig_getmethods__["endX"] = _Eureka.math_VECTOR_endX_get
    if _newclass:
        endX = _swig_property(_Eureka.math_VECTOR_endX_get, _Eureka.math_VECTOR_endX_set)
    __swig_setmethods__["endY"] = _Eureka.math_VECTOR_endY_set
    __swig_getmethods__["endY"] = _Eureka.math_VECTOR_endY_get
    if _newclass:
        endY = _swig_property(_Eureka.math_VECTOR_endY_get, _Eureka.math_VECTOR_endY_set)
    __swig_setmethods__["direction"] = _Eureka.math_VECTOR_direction_set
    __swig_getmethods__["direction"] = _Eureka.math_VECTOR_direction_get
    if _newclass:
        direction = _swig_property(_Eureka.math_VECTOR_direction_get, _Eureka.math_VECTOR_direction_set)
    __swig_setmethods__["magnitude"] = _Eureka.math_VECTOR_magnitude_set
    __swig_getmethods__["magnitude"] = _Eureka.math_VECTOR_magnitude_get
    if _newclass:
        magnitude = _swig_property(_Eureka.math_VECTOR_magnitude_get, _Eureka.math_VECTOR_magnitude_set)

    def __init__(self):
        this = _Eureka.new_math_VECTOR()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_math_VECTOR
    __del__ = lambda self: None
math_VECTOR_swigregister = _Eureka.math_VECTOR_swigregister
math_VECTOR_swigregister(math_VECTOR)

class math_point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, math_point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, math_point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _Eureka.math_point_X_set
    __swig_getmethods__["X"] = _Eureka.math_point_X_get
    if _newclass:
        X = _swig_property(_Eureka.math_point_X_get, _Eureka.math_point_X_set)
    __swig_setmethods__["Y"] = _Eureka.math_point_Y_set
    __swig_getmethods__["Y"] = _Eureka.math_point_Y_get
    if _newclass:
        Y = _swig_property(_Eureka.math_point_Y_get, _Eureka.math_point_Y_set)
    __swig_setmethods__["Z"] = _Eureka.math_point_Z_set
    __swig_getmethods__["Z"] = _Eureka.math_point_Z_get
    if _newclass:
        Z = _swig_property(_Eureka.math_point_Z_get, _Eureka.math_point_Z_set)

    def __init__(self):
        this = _Eureka.new_math_point()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_math_point
    __del__ = lambda self: None
math_point_swigregister = _Eureka.math_point_swigregister
math_point_swigregister(math_point)

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _Eureka.Range_i_set
    __swig_getmethods__["i"] = _Eureka.Range_i_get
    if _newclass:
        i = _swig_property(_Eureka.Range_i_get, _Eureka.Range_i_set)
    __swig_setmethods__["f"] = _Eureka.Range_f_set
    __swig_getmethods__["f"] = _Eureka.Range_f_get
    if _newclass:
        f = _swig_property(_Eureka.Range_f_get, _Eureka.Range_f_set)

    def __init__(self, I=0, F=1000):
        this = _Eureka.new_Range(I, F)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Range
    __del__ = lambda self: None
Range_swigregister = _Eureka.Range_swigregister
Range_swigregister(Range)


_Eureka.NONE_swigconstant(_Eureka)
NONE = _Eureka.NONE

_Eureka.VAR_swigconstant(_Eureka)
VAR = _Eureka.VAR

_Eureka.XML_swigconstant(_Eureka)
XML = _Eureka.XML

_Eureka.LUA_swigconstant(_Eureka)
LUA = _Eureka.LUA

_Eureka.PYTHON_swigconstant(_Eureka)
PYTHON = _Eureka.PYTHON

_Eureka.SQLITE_swigconstant(_Eureka)
SQLITE = _Eureka.SQLITE

_Eureka.MYSQL_swigconstant(_Eureka)
MYSQL = _Eureka.MYSQL

_Eureka.SKEWLEFT_swigconstant(_Eureka)
SKEWLEFT = _Eureka.SKEWLEFT

_Eureka.SKEWRIGHT_swigconstant(_Eureka)
SKEWRIGHT = _Eureka.SKEWRIGHT

_Eureka.SKEWBOTH_swigconstant(_Eureka)
SKEWBOTH = _Eureka.SKEWBOTH

_Eureka.NOFLIP_swigconstant(_Eureka)
NOFLIP = _Eureka.NOFLIP

_Eureka.HORIZONTALLY_swigconstant(_Eureka)
HORIZONTALLY = _Eureka.HORIZONTALLY

_Eureka.VERTICALLY_swigconstant(_Eureka)
VERTICALLY = _Eureka.VERTICALLY
class DataBase(SQLQuery):
    __swig_setmethods__ = {}
    for _s in [SQLQuery]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SQLQuery]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Eureka.new_DataBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def connect(self, file):
        return _Eureka.DataBase_connect(self, file)

    def disconnect(self):
        return _Eureka.DataBase_disconnect(self)

    def query(self, query):
        return _Eureka.DataBase_query(self, query)

    def GetResult(self, *args):
        return _Eureka.DataBase_GetResult(self, *args)

    def GetDBType(self):
        return _Eureka.DataBase_GetDBType(self)

    def isConnected(self):
        return _Eureka.DataBase_isConnected(self)
    __swig_destroy__ = _Eureka.delete_DataBase
    __del__ = lambda self: None
DataBase_swigregister = _Eureka.DataBase_swigregister
DataBase_swigregister(DataBase)

class pChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pChar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pBuffer"] = _Eureka.pChar_pBuffer_set
    __swig_getmethods__["pBuffer"] = _Eureka.pChar_pBuffer_get
    if _newclass:
        pBuffer = _swig_property(_Eureka.pChar_pBuffer_get, _Eureka.pChar_pBuffer_set)
    __swig_setmethods__["size"] = _Eureka.pChar_size_set
    __swig_getmethods__["size"] = _Eureka.pChar_size_get
    if _newclass:
        size = _swig_property(_Eureka.pChar_size_get, _Eureka.pChar_size_set)

    def __init__(self):
        this = _Eureka.new_pChar()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_pChar
    __del__ = lambda self: None
pChar_swigregister = _Eureka.pChar_swigregister
pChar_swigregister(pChar)


def charToInt(buffer):
    return _Eureka.charToInt(buffer)
charToInt = _Eureka.charToInt

def cStrToInt(buffer):
    return _Eureka.cStrToInt(buffer)
cStrToInt = _Eureka.cStrToInt

def intToStr(num):
    return _Eureka.intToStr(num)
intToStr = _Eureka.intToStr

def cStrToNum(buffer):
    return _Eureka.cStrToNum(buffer)
cStrToNum = _Eureka.cStrToNum

def numToStr(num):
    return _Eureka.numToStr(num)
numToStr = _Eureka.numToStr

def searchChar(character, buffer):
    return _Eureka.searchChar(character, buffer)
searchChar = _Eureka.searchChar

def findString(target, stringSource, pos=0):
    return _Eureka.findString(target, stringSource, pos)
findString = _Eureka.findString

def slice(input, start, end):
    return _Eureka.slice(input, start, end)
slice = _Eureka.slice

def shiftArrayLeft(*args):
    return _Eureka.shiftArrayLeft(*args)
shiftArrayLeft = _Eureka.shiftArrayLeft

def transferStr(input, array):
    return _Eureka.transferStr(input, array)
transferStr = _Eureka.transferStr

def createPCharFromBuffer(buffer, size):
    return _Eureka.createPCharFromBuffer(buffer, size)
createPCharFromBuffer = _Eureka.createPCharFromBuffer

def removeCharFromStr(target, cString):
    return _Eureka.removeCharFromStr(target, cString)
removeCharFromStr = _Eureka.removeCharFromStr

def removeMultipleCharFromStr(target, cString):
    return _Eureka.removeMultipleCharFromStr(target, cString)
removeMultipleCharFromStr = _Eureka.removeMultipleCharFromStr

def searchCharIndex(*args):
    return _Eureka.searchCharIndex(*args)
searchCharIndex = _Eureka.searchCharIndex

def sliceStr(input, start, end):
    return _Eureka.sliceStr(input, start, end)
sliceStr = _Eureka.sliceStr

def numToInt(value):
    return _Eureka.numToInt(value)
numToInt = _Eureka.numToInt

def fuseStrs(Str1, Str2):
    return _Eureka.fuseStrs(Str1, Str2)
fuseStrs = _Eureka.fuseStrs

def capitalizeStr(source):
    return _Eureka.capitalizeStr(source)
capitalizeStr = _Eureka.capitalizeStr

def replaceCharInStr(source, target, replacement, allInstances=True):
    return _Eureka.replaceCharInStr(source, target, replacement, allInstances)
replaceCharInStr = _Eureka.replaceCharInStr

def replaceStrInStr(source, target, replacement, allInstances=True):
    return _Eureka.replaceStrInStr(source, target, replacement, allInstances)
replaceStrInStr = _Eureka.replaceStrInStr

def removeLeadingWhiteSpace(source):
    return _Eureka.removeLeadingWhiteSpace(source)
removeLeadingWhiteSpace = _Eureka.removeLeadingWhiteSpace

def getCharArrayFromConstArray(s):
    return _Eureka.getCharArrayFromConstArray(s)
getCharArrayFromConstArray = _Eureka.getCharArrayFromConstArray

def round(value, precision):
    return _Eureka.round(value, precision)
round = _Eureka.round

def iround(value, precision):
    return _Eureka.iround(value, precision)
iround = _Eureka.iround

def changeProgramWorkingDirectory(newPath):
    return _Eureka.changeProgramWorkingDirectory(newPath)
changeProgramWorkingDirectory = _Eureka.changeProgramWorkingDirectory

def capitalizeChar(character):
    return _Eureka.capitalizeChar(character)
capitalizeChar = _Eureka.capitalizeChar

def lowerCaseChar(character):
    return _Eureka.lowerCaseChar(character)
lowerCaseChar = _Eureka.lowerCaseChar

def scientificFormat(*args):
    return _Eureka.scientificFormat(*args)
scientificFormat = _Eureka.scientificFormat

def isNum(strNum):
    return _Eureka.isNum(strNum)
isNum = _Eureka.isNum
class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    __swig_setmethods__["module"] = _Eureka.Module_module_set
    __swig_getmethods__["module"] = _Eureka.Module_module_get
    if _newclass:
        module = _swig_property(_Eureka.Module_module_get, _Eureka.Module_module_set)
    __swig_setmethods__["thread_id"] = _Eureka.Module_thread_id_set
    __swig_getmethods__["thread_id"] = _Eureka.Module_thread_id_get
    if _newclass:
        thread_id = _swig_property(_Eureka.Module_thread_id_get, _Eureka.Module_thread_id_set)
    __swig_setmethods__["mod_id"] = _Eureka.Module_mod_id_set
    __swig_getmethods__["mod_id"] = _Eureka.Module_mod_id_get
    if _newclass:
        mod_id = _swig_property(_Eureka.Module_mod_id_get, _Eureka.Module_mod_id_set)
    __swig_setmethods__["threaded"] = _Eureka.Module_threaded_set
    __swig_getmethods__["threaded"] = _Eureka.Module_threaded_get
    if _newclass:
        threaded = _swig_property(_Eureka.Module_threaded_get, _Eureka.Module_threaded_set)

    def __init__(self, owner, file, independent=False, pthread_id=0):
        this = _Eureka.new_Module(owner, file, independent, pthread_id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Module
    __del__ = lambda self: None
Module_swigregister = _Eureka.Module_swigregister
Module_swigregister(Module)

class ModuleSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_ModuleSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_ModuleSystem
    __del__ = lambda self: None

    def RegisterModule(self, file, threaded=False):
        return _Eureka.ModuleSystem_RegisterModule(self, file, threaded)

    def RegisterFunction(self, name, mod_id):
        return _Eureka.ModuleSystem_RegisterFunction(self, name, mod_id)

    def RegisterFunctionFromFile(self, file, mod_id):
        return _Eureka.ModuleSystem_RegisterFunctionFromFile(self, file, mod_id)

    def UnregisterModule(self, mod_id):
        return _Eureka.ModuleSystem_UnregisterModule(self, mod_id)

    def UnregisterFunction(self, name, mod_id):
        return _Eureka.ModuleSystem_UnregisterFunction(self, name, mod_id)

    def isFuncRegistered(self, name, mod_id):
        return _Eureka.ModuleSystem_isFuncRegistered(self, name, mod_id)

    def GetModuleThreadID(self, mod_id):
        return _Eureka.ModuleSystem_GetModuleThreadID(self, mod_id)

    def isModuleIndependent(self, mod_id):
        return _Eureka.ModuleSystem_isModuleIndependent(self, mod_id)

    def MarkModuleAsIndependent(self, mod_id):
        return _Eureka.ModuleSystem_MarkModuleAsIndependent(self, mod_id)

    def RunFunctionsInModule(self, mod_id):
        return _Eureka.ModuleSystem_RunFunctionsInModule(self, mod_id)

    def RunAllFunctions(self):
        return _Eureka.ModuleSystem_RunAllFunctions(self)
ModuleSystem_swigregister = _Eureka.ModuleSystem_swigregister
ModuleSystem_swigregister(ModuleSystem)

class UnitNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pData"] = _Eureka.UnitNode_pData_set
    __swig_getmethods__["pData"] = _Eureka.UnitNode_pData_get
    if _newclass:
        pData = _swig_property(_Eureka.UnitNode_pData_get, _Eureka.UnitNode_pData_set)
    __swig_setmethods__["Type"] = _Eureka.UnitNode_Type_set
    __swig_getmethods__["Type"] = _Eureka.UnitNode_Type_get
    if _newclass:
        Type = _swig_property(_Eureka.UnitNode_Type_get, _Eureka.UnitNode_Type_set)
    __swig_setmethods__["id"] = _Eureka.UnitNode_id_set
    __swig_getmethods__["id"] = _Eureka.UnitNode_id_get
    if _newclass:
        id = _swig_property(_Eureka.UnitNode_id_get, _Eureka.UnitNode_id_set)

    def __init__(self, *args):
        this = _Eureka.new_UnitNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_UnitNode
    __del__ = lambda self: None
UnitNode_swigregister = _Eureka.UnitNode_swigregister
UnitNode_swigregister(UnitNode)

class UnitManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_UnitManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_UnitManager
    __del__ = lambda self: None

    def SpawnUnit(self, type, BlitOrder, loc, file, hero, hasBars):
        return _Eureka.UnitManager_SpawnUnit(self, type, BlitOrder, loc, file, hero, hasBars)

    def SpawnUnitFromFile(self, file, BlitOrder):
        return _Eureka.UnitManager_SpawnUnitFromFile(self, file, BlitOrder)

    def SpawnUnitFromList(self, file, BlitOrder):
        return _Eureka.UnitManager_SpawnUnitFromList(self, file, BlitOrder)

    def SetSDLEvent(self, ev):
        return _Eureka.UnitManager_SetSDLEvent(self, ev)

    def GetUnit(self, id):
        return _Eureka.UnitManager_GetUnit(self, id)

    def GetUnitByName(self, name):
        return _Eureka.UnitManager_GetUnitByName(self, name)

    def FindNearbyUnit(self, pUnit):
        return _Eureka.UnitManager_FindNearbyUnit(self, pUnit)

    def hasUnit(self, *args):
        return _Eureka.UnitManager_hasUnit(self, *args)

    def DeleteUnit(self, unit):
        return _Eureka.UnitManager_DeleteUnit(self, unit)

    def DeleteUnitByID(self, id):
        return _Eureka.UnitManager_DeleteUnitByID(self, id)

    def DeleteUnitByName(self, name):
        return _Eureka.UnitManager_DeleteUnitByName(self, name)

    def DeleteAllProjectiles(self):
        return _Eureka.UnitManager_DeleteAllProjectiles(self)

    def DeleteAllGameObjects(self):
        return _Eureka.UnitManager_DeleteAllGameObjects(self)

    def DeleteAllUnits(self):
        return _Eureka.UnitManager_DeleteAllUnits(self)

    def DeleteAll(self):
        return _Eureka.UnitManager_DeleteAll(self)

    def RunPhysics(self):
        return _Eureka.UnitManager_RunPhysics(self)

    def DrawUnits(self):
        return _Eureka.UnitManager_DrawUnits(self)

    def RunEvents(self):
        return _Eureka.UnitManager_RunEvents(self)

    def PlaySounds(self):
        return _Eureka.UnitManager_PlaySounds(self)

    def GC(self):
        return _Eureka.UnitManager_GC(self)

    def UnlockUnit(self):
        return _Eureka.UnitManager_UnlockUnit(self)
UnitManager_swigregister = _Eureka.UnitManager_swigregister
UnitManager_swigregister(UnitManager)


def traversalRender(id, node):
    return _Eureka.traversalRender(id, node)
traversalRender = _Eureka.traversalRender
class Particle(Physics):
    __swig_setmethods__ = {}
    for _s in [Physics]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    for _s in [Physics]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, owner, file, location, refParticle=None):
        this = _Eureka.new_Particle(owner, file, location, refParticle)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Particle
    __del__ = lambda self: None

    def RenderParticle(self):
        return _Eureka.Particle_RenderParticle(self)

    def OverrideParticlePos(self, newPos):
        return _Eureka.Particle_OverrideParticlePos(self, newPos)

    def GetParticle(self):
        return _Eureka.Particle_GetParticle(self)

    def isDead(self):
        return _Eureka.Particle_isDead(self)

    def SetParticle(self, other):
        return _Eureka.Particle_SetParticle(self, other)
Particle_swigregister = _Eureka.Particle_swigregister
Particle_swigregister(Particle)

class ParticleNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Eureka.new_ParticleNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_ParticleNode
    __del__ = lambda self: None

    def RenderParticles(self):
        return _Eureka.ParticleNode_RenderParticles(self)

    def RenderParticlesByProximity(self, loc, radius=100):
        return _Eureka.ParticleNode_RenderParticlesByProximity(self, loc, radius)

    def SetInitialForce(self, force):
        return _Eureka.ParticleNode_SetInitialForce(self, force)
ParticleNode_swigregister = _Eureka.ParticleNode_swigregister
ParticleNode_swigregister(ParticleNode)

class ParticleCluster(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleCluster, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleCluster, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_ParticleCluster(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_ParticleCluster
    __del__ = lambda self: None

    def GetParticleCount(self):
        return _Eureka.ParticleCluster_GetParticleCount(self)

    def SetInitialForce(self, id, force):
        return _Eureka.ParticleCluster_SetInitialForce(self, id, force)

    def RenderParticleById(self, id):
        return _Eureka.ParticleCluster_RenderParticleById(self, id)

    def RenderAllParticles(self):
        return _Eureka.ParticleCluster_RenderAllParticles(self)

    def RenderParticlesByProximity(self, loc, radius=100):
        return _Eureka.ParticleCluster_RenderParticlesByProximity(self, loc, radius)

    def RegisterParticle(self, *args):
        return _Eureka.ParticleCluster_RegisterParticle(self, *args)

    def DeleteParticle(self, id):
        return _Eureka.ParticleCluster_DeleteParticle(self, id)

    def DeleteAllParticles(self):
        return _Eureka.ParticleCluster_DeleteAllParticles(self)
ParticleCluster_swigregister = _Eureka.ParticleCluster_swigregister
ParticleCluster_swigregister(ParticleCluster)

class ParticleSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_ParticleSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_ParticleSystem
    __del__ = lambda self: None

    def RegisterUnitParticle(self, *args):
        return _Eureka.ParticleSystem_RegisterUnitParticle(self, *args)

    def RegisterGameParticle(self, *args):
        return _Eureka.ParticleSystem_RegisterGameParticle(self, *args)

    def RenderParticleFromUnit(self, unit, id):
        return _Eureka.ParticleSystem_RenderParticleFromUnit(self, unit, id)

    def RenderAllParticlesFromUnit(self, unit):
        return _Eureka.ParticleSystem_RenderAllParticlesFromUnit(self, unit)

    def RenderUnitParticlesByProximity(self, unit, radius=100):
        return _Eureka.ParticleSystem_RenderUnitParticlesByProximity(self, unit, radius)

    def RenderGameParticlesByProximity(self, loc, radius=100):
        return _Eureka.ParticleSystem_RenderGameParticlesByProximity(self, loc, radius)

    def RenderAllParticlesFromGame(self):
        return _Eureka.ParticleSystem_RenderAllParticlesFromGame(self)

    def DeleteUnitParticle(self, unit, id):
        return _Eureka.ParticleSystem_DeleteUnitParticle(self, unit, id)

    def DeleteGameParticle(self, id):
        return _Eureka.ParticleSystem_DeleteGameParticle(self, id)

    def ClearUnitParticles(self):
        return _Eureka.ParticleSystem_ClearUnitParticles(self)

    def ClearGameParticles(self):
        return _Eureka.ParticleSystem_ClearGameParticles(self)

    def ClearAllParticles(self):
        return _Eureka.ParticleSystem_ClearAllParticles(self)

    def GetUnitParticleCount(self, unit):
        return _Eureka.ParticleSystem_GetUnitParticleCount(self, unit)

    def GetGameParticleCount(self):
        return _Eureka.ParticleSystem_GetGameParticleCount(self)

    def SetInitialForceOfUnitParticle(self, unit, id, force):
        return _Eureka.ParticleSystem_SetInitialForceOfUnitParticle(self, unit, id, force)

    def SetInitialForceOfGameParticle(self, id, force):
        return _Eureka.ParticleSystem_SetInitialForceOfGameParticle(self, id, force)
ParticleSystem_swigregister = _Eureka.ParticleSystem_swigregister
ParticleSystem_swigregister(ParticleSystem)

class ThreadSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadSystem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Eureka.new_ThreadSystem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_ThreadSystem
    __del__ = lambda self: None

    def SpawnThread(self, target, arg):
        return _Eureka.ThreadSystem_SpawnThread(self, target, arg)

    def SpawnMutex(self):
        return _Eureka.ThreadSystem_SpawnMutex(self)

    def SpawnCondVar(self):
        return _Eureka.ThreadSystem_SpawnCondVar(self)

    def GetMutex(self, id):
        return _Eureka.ThreadSystem_GetMutex(self, id)

    def GetConditionVariable(self, id):
        return _Eureka.ThreadSystem_GetConditionVariable(self, id)

    def LockMutex(self, mutex_id):
        return _Eureka.ThreadSystem_LockMutex(self, mutex_id)

    def WaitForCond(self, mutex_id, cond_id):
        return _Eureka.ThreadSystem_WaitForCond(self, mutex_id, cond_id)

    def SignalCond(self, cond_id):
        return _Eureka.ThreadSystem_SignalCond(self, cond_id)

    def UnlockMutex(self, mutex_id):
        return _Eureka.ThreadSystem_UnlockMutex(self, mutex_id)

    def CloseThread(self, id):
        return _Eureka.ThreadSystem_CloseThread(self, id)

    def DeleteMutex(self, id):
        return _Eureka.ThreadSystem_DeleteMutex(self, id)

    def DeleteConditionVariable(self, id):
        return _Eureka.ThreadSystem_DeleteConditionVariable(self, id)
ThreadSystem_swigregister = _Eureka.ThreadSystem_swigregister
ThreadSystem_swigregister(ThreadSystem)

class UDPClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDPClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDPClient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip"] = _Eureka.UDPClient_ip_set
    __swig_getmethods__["ip"] = _Eureka.UDPClient_ip_get
    if _newclass:
        ip = _swig_property(_Eureka.UDPClient_ip_get, _Eureka.UDPClient_ip_set)
    __swig_setmethods__["nativeChannel"] = _Eureka.UDPClient_nativeChannel_set
    __swig_getmethods__["nativeChannel"] = _Eureka.UDPClient_nativeChannel_get
    if _newclass:
        nativeChannel = _swig_property(_Eureka.UDPClient_nativeChannel_get, _Eureka.UDPClient_nativeChannel_set)
    __swig_setmethods__["serverChannel"] = _Eureka.UDPClient_serverChannel_set
    __swig_getmethods__["serverChannel"] = _Eureka.UDPClient_serverChannel_get
    if _newclass:
        serverChannel = _swig_property(_Eureka.UDPClient_serverChannel_get, _Eureka.UDPClient_serverChannel_set)
    __swig_setmethods__["udp"] = _Eureka.UDPClient_udp_set
    __swig_getmethods__["udp"] = _Eureka.UDPClient_udp_get
    if _newclass:
        udp = _swig_property(_Eureka.UDPClient_udp_get, _Eureka.UDPClient_udp_set)

    def __init__(self):
        this = _Eureka.new_UDPClient()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_UDPClient
    __del__ = lambda self: None
UDPClient_swigregister = _Eureka.UDPClient_swigregister
UDPClient_swigregister(UDPClient)

class TCPClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPClient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _Eureka.TCPClient_id_set
    __swig_getmethods__["id"] = _Eureka.TCPClient_id_get
    if _newclass:
        id = _swig_property(_Eureka.TCPClient_id_get, _Eureka.TCPClient_id_set)
    __swig_setmethods__["host"] = _Eureka.TCPClient_host_set
    __swig_getmethods__["host"] = _Eureka.TCPClient_host_get
    if _newclass:
        host = _swig_property(_Eureka.TCPClient_host_get, _Eureka.TCPClient_host_set)
    __swig_setmethods__["port"] = _Eureka.TCPClient_port_set
    __swig_getmethods__["port"] = _Eureka.TCPClient_port_get
    if _newclass:
        port = _swig_property(_Eureka.TCPClient_port_get, _Eureka.TCPClient_port_set)
    __swig_setmethods__["host_name"] = _Eureka.TCPClient_host_name_set
    __swig_getmethods__["host_name"] = _Eureka.TCPClient_host_name_get
    if _newclass:
        host_name = _swig_property(_Eureka.TCPClient_host_name_get, _Eureka.TCPClient_host_name_set)
    __swig_setmethods__["sock"] = _Eureka.TCPClient_sock_set
    __swig_getmethods__["sock"] = _Eureka.TCPClient_sock_get
    if _newclass:
        sock = _swig_property(_Eureka.TCPClient_sock_get, _Eureka.TCPClient_sock_set)

    def __init__(self):
        this = _Eureka.new_TCPClient()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_TCPClient
    __del__ = lambda self: None
TCPClient_swigregister = _Eureka.TCPClient_swigregister
TCPClient_swigregister(TCPClient)

class NetNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Eureka.new_NetNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_NetNode
    __del__ = lambda self: None

    def GetAddress(self):
        return _Eureka.NetNode_GetAddress(self)

    def GetTCPSocket(self, client_id=-1):
        return _Eureka.NetNode_GetTCPSocket(self, client_id)

    def GetTCPClientInfo(self, client_id):
        return _Eureka.NetNode_GetTCPClientInfo(self, client_id)

    def GetUDPSocket(self):
        return _Eureka.NetNode_GetUDPSocket(self)

    def GetUDPClientInfo(self, channel):
        return _Eureka.NetNode_GetUDPClientInfo(self, channel)

    def GetPort(self):
        return _Eureka.NetNode_GetPort(self)

    def GetNodeID(self):
        return _Eureka.NetNode_GetNodeID(self)

    def GetClientCount(self):
        return _Eureka.NetNode_GetClientCount(self)

    def GenerateUDPChannel(self):
        return _Eureka.NetNode_GenerateUDPChannel(self)

    def isUDP(self):
        return _Eureka.NetNode_isUDP(self)

    def isServer(self):
        return _Eureka.NetNode_isServer(self)

    def isBad(self):
        return _Eureka.NetNode_isBad(self)

    def isUDPChannelFull(self, channel):
        return _Eureka.NetNode_isUDPChannelFull(self, channel)

    def AcceptTCPClient(self):
        return _Eureka.NetNode_AcceptTCPClient(self)

    def RegisterUDPClient(self, ip, channel):
        return _Eureka.NetNode_RegisterUDPClient(self, ip, channel)

    def UnRegisterTCPClient(self, client_id):
        return _Eureka.NetNode_UnRegisterTCPClient(self, client_id)

    def UnRegisterUDPClient(self, channel):
        return _Eureka.NetNode_UnRegisterUDPClient(self, channel)
NetNode_swigregister = _Eureka.NetNode_swigregister
NetNode_swigregister(NetNode)

class NetworkManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_NetworkManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_NetworkManager
    __del__ = lambda self: None

    def CreateClientConnection(self, host, port, udp=False):
        return _Eureka.NetworkManager_CreateClientConnection(self, host, port, udp)

    def CreateServer(self, port, udp=False):
        return _Eureka.NetworkManager_CreateServer(self, port, udp)

    def AcceptTCPClient(self, socket_id):
        return _Eureka.NetworkManager_AcceptTCPClient(self, socket_id)

    def AcceptUDPClient(self, socket_id):
        return _Eureka.NetworkManager_AcceptUDPClient(self, socket_id)

    def CloseUDPClient(self, socket_id, channel):
        return _Eureka.NetworkManager_CloseUDPClient(self, socket_id, channel)

    def SetMTU(self, max):
        return _Eureka.NetworkManager_SetMTU(self, max)

    def SendData(self, data, len, socket_id, client_id=-1):
        return _Eureka.NetworkManager_SendData(self, data, len, socket_id, client_id)

    def SendDataStr(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_SendDataStr(self, data, socket_id, client_id)

    def SendDataInt(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_SendDataInt(self, data, socket_id, client_id)

    def SendDataBoolean(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_SendDataBoolean(self, data, socket_id, client_id)

    def SendDataDouble(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_SendDataDouble(self, data, socket_id, client_id)

    def SendDataChar(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_SendDataChar(self, data, socket_id, client_id)

    def SendUDPSignal(self, socket_id, sig_data):
        return _Eureka.NetworkManager_SendUDPSignal(self, socket_id, sig_data)

    def RecvData(self, data, maxlen, socket_id, client_id=-1):
        return _Eureka.NetworkManager_RecvData(self, data, maxlen, socket_id, client_id)

    def RecvDataStr(self, data, maxlen, socket_id, client_id=-1):
        return _Eureka.NetworkManager_RecvDataStr(self, data, maxlen, socket_id, client_id)

    def RecvDataInt(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_RecvDataInt(self, data, socket_id, client_id)

    def RecvDataChar(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_RecvDataChar(self, data, socket_id, client_id)

    def RecvDataBoolean(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_RecvDataBoolean(self, data, socket_id, client_id)

    def RecvDataDouble(self, data, socket_id, client_id=-1):
        return _Eureka.NetworkManager_RecvDataDouble(self, data, socket_id, client_id)

    def PingUDPClient(self, socket_id, channel, timeout=5000):
        return _Eureka.NetworkManager_PingUDPClient(self, socket_id, channel, timeout)

    def GetMaxNumUDPChannels(self):
        return _Eureka.NetworkManager_GetMaxNumUDPChannels(self)

    def GetUDPClientInfo(self, socket_id, channel):
        return _Eureka.NetworkManager_GetUDPClientInfo(self, socket_id, channel)

    def GetTCPClientInfo(self, socket_id, client_id):
        return _Eureka.NetworkManager_GetTCPClientInfo(self, socket_id, client_id)
NetworkManager_swigregister = _Eureka.NetworkManager_swigregister
NetworkManager_swigregister(NetworkManager)

class IONode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IONode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IONode, name)
    __repr__ = _swig_repr

    def __init__(self, inputMode, id, file_path, database=False):
        this = _Eureka.new_IONode(inputMode, id, file_path, database)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_IONode
    __del__ = lambda self: None

    def DecCount(self):
        return _Eureka.IONode_DecCount(self)

    def IncCount(self):
        return _Eureka.IONode_IncCount(self)

    def GetCount(self):
        return _Eureka.IONode_GetCount(self)

    def GetID(self):
        return _Eureka.IONode_GetID(self)

    def GetPath(self):
        return _Eureka.IONode_GetPath(self)

    def GetFile(self):
        return _Eureka.IONode_GetFile(self)

    def GetDataBase(self):
        return _Eureka.IONode_GetDataBase(self)
IONode_swigregister = _Eureka.IONode_swigregister
IONode_swigregister(IONode)

class IOManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_IOManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_IOManager
    __del__ = lambda self: None

    def GetFile(self, file_id):
        return _Eureka.IOManager_GetFile(self, file_id)

    def GetDataBase(self, db_id):
        return _Eureka.IOManager_GetDataBase(self, db_id)

    def RegisterFile(self, file_path, inputMode=True):
        return _Eureka.IOManager_RegisterFile(self, file_path, inputMode)

    def RegisterDataBase(self, file):
        return _Eureka.IOManager_RegisterDataBase(self, file)

    def CloseFile(self, file_id):
        return _Eureka.IOManager_CloseFile(self, file_id)

    def CloseDBConnection(self, db_id):
        return _Eureka.IOManager_CloseDBConnection(self, db_id)
IOManager_swigregister = _Eureka.IOManager_swigregister
IOManager_swigregister(IOManager)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer"] = _Eureka.Layer_layer_set
    __swig_getmethods__["layer"] = _Eureka.Layer_layer_get
    if _newclass:
        layer = _swig_property(_Eureka.Layer_layer_get, _Eureka.Layer_layer_set)
    __swig_setmethods__["id"] = _Eureka.Layer_id_set
    __swig_getmethods__["id"] = _Eureka.Layer_id_get
    if _newclass:
        id = _swig_property(_Eureka.Layer_id_get, _Eureka.Layer_id_set)
    __swig_setmethods__["loc"] = _Eureka.Layer_loc_set
    __swig_getmethods__["loc"] = _Eureka.Layer_loc_get
    if _newclass:
        loc = _swig_property(_Eureka.Layer_loc_get, _Eureka.Layer_loc_set)

    def __init__(self, file, owner, l_id):
        this = _Eureka.new_Layer(file, owner, l_id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Layer
    __del__ = lambda self: None
Layer_swigregister = _Eureka.Layer_swigregister
Layer_swigregister(Layer)

class LayerSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_LayerSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_LayerSystem
    __del__ = lambda self: None

    def AddLayer(self, file):
        return _Eureka.LayerSystem_AddLayer(self, file)

    def AddLayerSet(self, file):
        return _Eureka.LayerSystem_AddLayerSet(self, file)

    def DeleteLayer(self, l_id):
        return _Eureka.LayerSystem_DeleteLayer(self, l_id)

    def DeleteAllLayers(self):
        return _Eureka.LayerSystem_DeleteAllLayers(self)

    def GetLayer(self, l_id):
        return _Eureka.LayerSystem_GetLayer(self, l_id)

    def GetLayerCount(self):
        return _Eureka.LayerSystem_GetLayerCount(self)

    def DrawLayers(self):
        return _Eureka.LayerSystem_DrawLayers(self)
LayerSystem_swigregister = _Eureka.LayerSystem_swigregister
LayerSystem_swigregister(LayerSystem)

class ScreenInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Eureka.new_ScreenInfo()
        try:
            self.this.append(this)
        except:
            self.this = this

    def SetScreenInfo(self, displayCount=1, display=0, frames_per_second=60, screenWidth=640, screenHeight=480, screenBPP=32):
        return _Eureka.ScreenInfo_SetScreenInfo(self, displayCount, display, frames_per_second, screenWidth, screenHeight, screenBPP)

    def GetMaxFramesPerSec(self):
        return _Eureka.ScreenInfo_GetMaxFramesPerSec(self)

    def GetScreenWidth(self):
        return _Eureka.ScreenInfo_GetScreenWidth(self)

    def GetScreenHeight(self):
        return _Eureka.ScreenInfo_GetScreenHeight(self)

    def GetScreenLoc(self):
        return _Eureka.ScreenInfo_GetScreenLoc(self)

    def GetScreenBPP(self):
        return _Eureka.ScreenInfo_GetScreenBPP(self)

    def GetDisplayIndex(self):
        return _Eureka.ScreenInfo_GetDisplayIndex(self)

    def GetDisplayCount(self):
        return _Eureka.ScreenInfo_GetDisplayCount(self)
    __swig_destroy__ = _Eureka.delete_ScreenInfo
    __del__ = lambda self: None
ScreenInfo_swigregister = _Eureka.ScreenInfo_swigregister
ScreenInfo_swigregister(ScreenInfo)

class SoundInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Eureka.new_SoundInfo()
        try:
            self.this.append(this)
        except:
            self.this = this

    def SetSoundInfo(self, frequency=22050, channels=2, chunksize=4096):
        return _Eureka.SoundInfo_SetSoundInfo(self, frequency, channels, chunksize)

    def GetSoundFrequency(self):
        return _Eureka.SoundInfo_GetSoundFrequency(self)

    def GetSoundChannels(self):
        return _Eureka.SoundInfo_GetSoundChannels(self)

    def GetSoundChunkSize(self):
        return _Eureka.SoundInfo_GetSoundChunkSize(self)
    __swig_destroy__ = _Eureka.delete_SoundInfo
    __del__ = lambda self: None
SoundInfo_swigregister = _Eureka.SoundInfo_swigregister
SoundInfo_swigregister(SoundInfo)

class GameInfo(ScreenInfo, SoundInfo):
    __swig_setmethods__ = {}
    for _s in [ScreenInfo, SoundInfo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ScreenInfo, SoundInfo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Eureka.new_GameInfo()
        try:
            self.this.append(this)
        except:
            self.this = this

    def SetInfo(self, *args):
        return _Eureka.GameInfo_SetInfo(self, *args)

    def SetScreenLoc(self, x=0, y=0):
        return _Eureka.GameInfo_SetScreenLoc(self, x, y)

    def GetRootDirectory(self):
        return _Eureka.GameInfo_GetRootDirectory(self)

    def GetModName(self):
        return _Eureka.GameInfo_GetModName(self)

    def GetGameName(self):
        return _Eureka.GameInfo_GetGameName(self)

    def GetBlitLevels(self):
        return _Eureka.GameInfo_GetBlitLevels(self)

    def GetRenderQuality(self):
        return _Eureka.GameInfo_GetRenderQuality(self)
    __swig_destroy__ = _Eureka.delete_GameInfo
    __del__ = lambda self: None
GameInfo_swigregister = _Eureka.GameInfo_swigregister
GameInfo_swigregister(GameInfo)

class TriggerManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_TriggerManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_TriggerManager
    __del__ = lambda self: None

    def RegisterTrigger(self, file):
        return _Eureka.TriggerManager_RegisterTrigger(self, file)

    def UnRegisterTrigger(self, trigger_id):
        return _Eureka.TriggerManager_UnRegisterTrigger(self, trigger_id)

    def GetTrigger(self, trigger_id):
        return _Eureka.TriggerManager_GetTrigger(self, trigger_id)

    def UpdateTriggers(self, unit_id):
        return _Eureka.TriggerManager_UpdateTriggers(self, unit_id)

    def UpdateTrigger(self, trigger_id, unit_id):
        return _Eureka.TriggerManager_UpdateTrigger(self, trigger_id, unit_id)

    def UpdateTriggerLocation(self, loc, trigger_id):
        return _Eureka.TriggerManager_UpdateTriggerLocation(self, loc, trigger_id)
TriggerManager_swigregister = _Eureka.TriggerManager_swigregister
TriggerManager_swigregister(TriggerManager)

class TimerSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_TimerSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_TimerSystem
    __del__ = lambda self: None

    def GetTicks(self, t_id):
        return _Eureka.TimerSystem_GetTicks(self, t_id)

    def StopTimer(self, t_id):
        return _Eureka.TimerSystem_StopTimer(self, t_id)

    def StartTimer(self, t_id):
        return _Eureka.TimerSystem_StartTimer(self, t_id)

    def PauseTimer(self, t_id):
        return _Eureka.TimerSystem_PauseTimer(self, t_id)

    def UnpauseTimer(self, t_id):
        return _Eureka.TimerSystem_UnpauseTimer(self, t_id)

    def isTimerStarted(self, t_id):
        return _Eureka.TimerSystem_isTimerStarted(self, t_id)

    def isTimerPaused(self, t_id):
        return _Eureka.TimerSystem_isTimerPaused(self, t_id)

    def CreateTimer(self):
        return _Eureka.TimerSystem_CreateTimer(self)

    def DeleteTimer(self, t_id):
        return _Eureka.TimerSystem_DeleteTimer(self, t_id)
TimerSystem_swigregister = _Eureka.TimerSystem_swigregister
TimerSystem_swigregister(TimerSystem)

class UIManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _Eureka.new_UIManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_UIManager
    __del__ = lambda self: None

    def RegisterUI(self, file):
        return _Eureka.UIManager_RegisterUI(self, file)

    def UnregisterUI(self, ui_id):
        return _Eureka.UIManager_UnregisterUI(self, ui_id)

    def GetUI(self, ui_id):
        return _Eureka.UIManager_GetUI(self, ui_id)

    def FindUIByName(self, name):
        return _Eureka.UIManager_FindUIByName(self, name)

    def uiIDExists(self, id):
        return _Eureka.UIManager_uiIDExists(self, id)

    def UIUpdate(self):
        return _Eureka.UIManager_UIUpdate(self)

    def UIProcessEvents(self):
        return _Eureka.UIManager_UIProcessEvents(self)

    def UIDraw(self):
        return _Eureka.UIManager_UIDraw(self)
UIManager_swigregister = _Eureka.UIManager_swigregister
UIManager_swigregister(UIManager)


def helperUIUpdate(game):
    return _Eureka.helperUIUpdate(game)
helperUIUpdate = _Eureka.helperUIUpdate

def helperUIProcessEvents(game):
    return _Eureka.helperUIProcessEvents(game)
helperUIProcessEvents = _Eureka.helperUIProcessEvents

def helperUIDraw(game):
    return _Eureka.helperUIDraw(game)
helperUIDraw = _Eureka.helperUIDraw
class Level(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Level, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Level, name)
    __repr__ = _swig_repr

    def __init__(self, owner, file):
        this = _Eureka.new_Level(owner, file)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Level
    __del__ = lambda self: None

    def isMusicPlaying(self):
        return _Eureka.Level_isMusicPlaying(self)

    def GetMapName(self):
        return _Eureka.Level_GetMapName(self)

    def GetHeroID(self):
        return _Eureka.Level_GetHeroID(self)

    def GetLayerIDs(self):
        return _Eureka.Level_GetLayerIDs(self)

    def GetUnitIDs(self):
        return _Eureka.Level_GetUnitIDs(self)

    def GetUIIDs(self):
        return _Eureka.Level_GetUIIDs(self)

    def GetModuleIDs(self):
        return _Eureka.Level_GetModuleIDs(self)

    def GetTriggerIDs(self):
        return _Eureka.Level_GetTriggerIDs(self)

    def playBackgroundMusic(self):
        return _Eureka.Level_playBackgroundMusic(self)

    def killBackgrounMusic(self):
        return _Eureka.Level_killBackgrounMusic(self)

    def fadeBackgroundMusic(self, ms):
        return _Eureka.Level_fadeBackgroundMusic(self, ms)

    def SetHeroID(self, h_id):
        return _Eureka.Level_SetHeroID(self, h_id)
Level_swigregister = _Eureka.Level_swigregister
Level_swigregister(Level)

class Game(ParticleSystem, ModuleSystem, UnitManager, IOManager, UIManager, NetworkManager, TriggerManager, LayerSystem, TimerSystem, ThreadSystem, GameInfo):
    __swig_setmethods__ = {}
    for _s in [ParticleSystem, ModuleSystem, UnitManager, IOManager, UIManager, NetworkManager, TriggerManager, LayerSystem, TimerSystem, ThreadSystem, GameInfo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticleSystem, ModuleSystem, UnitManager, IOManager, UIManager, NetworkManager, TriggerManager, LayerSystem, TimerSystem, ThreadSystem, GameInfo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Eureka.new_Game(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Eureka.delete_Game
    __del__ = lambda self: None

    def LoadGame(self, file):
        return _Eureka.Game_LoadGame(self, file)

    def LoadGameConstants(self, file):
        return _Eureka.Game_LoadGameConstants(self, file)

    def LoadGlobalModules(self, file):
        return _Eureka.Game_LoadGlobalModules(self, file)

    def LoadUIs(self, file):
        return _Eureka.Game_LoadUIs(self, file)

    def initEditorFrameBuffer(self):
        return _Eureka.Game_initEditorFrameBuffer(self)

    def init(self):
        return _Eureka.Game_init(self)

    def loadLevel(self, file):
        return _Eureka.Game_loadLevel(self, file)

    def GetCurrentLevel(self):
        return _Eureka.Game_GetCurrentLevel(self)

    def SetHeroIDForCurrentLevel(self, h_id):
        return _Eureka.Game_SetHeroIDForCurrentLevel(self, h_id)

    def SetHeroUnitAsLoaded(self):
        return _Eureka.Game_SetHeroUnitAsLoaded(self)

    def UnsetHeroUnitAsLoaded(self):
        return _Eureka.Game_UnsetHeroUnitAsLoaded(self)

    def GetRenderer(self):
        return _Eureka.Game_GetRenderer(self)

    def GetEvents(self):
        return _Eureka.Game_GetEvents(self)

    def GetMainTimer(self):
        return _Eureka.Game_GetMainTimer(self)

    def GetHeroID(self):
        return _Eureka.Game_GetHeroID(self)

    def isMultithreaded(self):
        return _Eureka.Game_isMultithreaded(self)

    def GetRelativity(self):
        return _Eureka.Game_GetRelativity(self)

    def isEngineClosing(self):
        return _Eureka.Game_isEngineClosing(self)

    def noHero(self):
        return _Eureka.Game_noHero(self)

    def GetFrameBuffer(self):
        return _Eureka.Game_GetFrameBuffer(self)

    def GetSizeOfFrameBuffer(self):
        return _Eureka.Game_GetSizeOfFrameBuffer(self)

    def loadSaveData(self, file):
        return _Eureka.Game_loadSaveData(self, file)

    def SaveData(self, query):
        return _Eureka.Game_SaveData(self, query)

    def GetSaveDataHandle(self):
        return _Eureka.Game_GetSaveDataHandle(self)

    def FrameCapper(self):
        return _Eureka.Game_FrameCapper(self)

    def ClearEditorFrameBuffer(self):
        return _Eureka.Game_ClearEditorFrameBuffer(self)

    def drawWorld(self):
        return _Eureka.Game_drawWorld(self)

    def playSounds(self):
        return _Eureka.Game_playSounds(self)

    def runPhysics(self):
        return _Eureka.Game_runPhysics(self)

    def run(self):
        return _Eureka.Game_run(self)

    def stopGame(self):
        return _Eureka.Game_stopGame(self)

    def mainGC(self):
        return _Eureka.Game_mainGC(self)

    def ShowLoadingScreen(self):
        return _Eureka.Game_ShowLoadingScreen(self)

    def UpdateLoadingStatus(self, value):
        return _Eureka.Game_UpdateLoadingStatus(self, value)

    def HideLoadingScreen(self):
        return _Eureka.Game_HideLoadingScreen(self)

    def ReplaceLoadingScreen(self, file):
        return _Eureka.Game_ReplaceLoadingScreen(self, file)

    def ShowMainMenu(self):
        return _Eureka.Game_ShowMainMenu(self)

    def HideMainMenu(self):
        return _Eureka.Game_HideMainMenu(self)

    def ReplaceMainMenu(self, file):
        return _Eureka.Game_ReplaceMainMenu(self, file)

    def ShowHUD(self):
        return _Eureka.Game_ShowHUD(self)

    def HideHUD(self):
        return _Eureka.Game_HideHUD(self)

    def ReplaceHUD(self, file):
        return _Eureka.Game_ReplaceHUD(self, file)
Game_swigregister = _Eureka.Game_swigregister
Game_swigregister(Game)
Game.loadRate = _Eureka.cvar.Game_loadRate


def helperDrawFunction(game):
    return _Eureka.helperDrawFunction(game)
helperDrawFunction = _Eureka.helperDrawFunction

def helperSoundFunction(game):
    return _Eureka.helperSoundFunction(game)
helperSoundFunction = _Eureka.helperSoundFunction

def helperPhysicsFunction(game):
    return _Eureka.helperPhysicsFunction(game)
helperPhysicsFunction = _Eureka.helperPhysicsFunction

def helperEventsFunction(game):
    return _Eureka.helperEventsFunction(game)
helperEventsFunction = _Eureka.helperEventsFunction

def helperGCFunction(game):
    return _Eureka.helperGCFunction(game)
helperGCFunction = _Eureka.helperGCFunction

def helperPluginFunction(obj):
    return _Eureka.helperPluginFunction(obj)
helperPluginFunction = _Eureka.helperPluginFunction

def helperUpdateFunction(game):
    return _Eureka.helperUpdateFunction(game)
helperUpdateFunction = _Eureka.helperUpdateFunction
# This file is compatible with both classic and new-style classes.


